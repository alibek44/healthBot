import base64
import random
import requests
import telebot
from openai import (OpenAI)
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import threading
import time
from datetime import datetime, timedelta
import json
import os

#reading keys from json file
with open("kick.json", "r") as json_file:
    a = json.load(json_file)

with open("token.json", "r") as f:
    key=json.load(f)

OPENAI_API_KEY=key["Open_AI_key"]
client = OpenAI(api_key=OPENAI_API_KEY)

TELEGRAM_TOKEN = a["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_TOKEN)
#dictionaries to store data
user_bmi_data = {}
user_challenges = {}
user_data = {}
reminders = {}
CHALLENGES_FILE = "challenges.json"
DATA_FILE = "challenges.json"

def load_challenges():
    if os.path.exists(CHALLENGES_FILE):
        with open(CHALLENGES_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return []

def save_challenges(challenges):
    with open(CHALLENGES_FILE, "w", encoding="utf-8") as file:
        json.dump(challenges, file, indent=4, ensure_ascii=False)

#chalanges dictionary
challenges = [
    "–°–¥–µ–ª–∞—Ç—å 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞—Ç—å 100 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞—Ç—å 50 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π",
    "–ü—Ä–æ–±–µ–∂–∞—Ç—å 5 –∫–º",
    "–í—Å—Ç–∞—Ç—å –≤ –ø–ª–∞–Ω–∫—É –Ω–∞ 5 –º–∏–Ω—É—Ç",
    "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ –Ω–∞ 3 –¥–Ω—è",
    "–°–¥–µ–ª–∞—Ç—å 200 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ",
    "–ü—Ä–æ–π—Ç–∏ 10 000 —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å"
]

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)
#check for active reminders and reminding them
def reminder_checker():
    while True:
        now = datetime.now()
        for user_id, user_reminders in list(reminders.items()):
            for reminder in user_reminders:
                reminder_time, message = reminder
                if now >= reminder_time:
                    bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: *{message}*")
                    reminders[user_id].remove(reminder)
            if not reminders[user_id]:
                del reminders[user_id]
        time.sleep(30)
#welcome message
@bot.message_handler(commands=['start'])
def start_message(message: Message):
    bot.send_message(
        message.chat.id,
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏! üéØ\n\n"
        "üìù –ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ —Å—é–¥–∞ /reviews !\n"
        "üìå –¢–∞–∫–∂–µ —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. –ù–∞–ø–∏—à–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'!"
    )
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    user_data[message.chat.id] = {"name": message.text}
    bot.register_next_step_handler(message, func)

#Buttons
def func(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢")
    btn2 = KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    btn3 = KeyboardButton("üì∏ –§–æ—Ç–æ –µ–¥—ã")
    btn4 = KeyboardButton("üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è")
    btn5 = KeyboardButton("üî• –¢–≤–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂—ã")
    btn6 = KeyboardButton("üìâ –í–∞—à –ò–ú–¢ —Å–µ–π—á–∞—Å")

    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

#fuction that counts bmi
@bot.message_handler(func=lambda message: message.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢")
def ask_height(message: Message):
    bot.send_message(message.chat.id, "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *—Ä–æ—Å—Ç* (–≤ —Å–º):")
    bot.register_next_step_handler(message, ask_weight)

def ask_weight(message: Message):
    try:
        height = float(message.text)

        if message.chat.id not in user_data:
            user_data[message.chat.id] = {}

        user_data[message.chat.id]["height"] = height  #saving user height
        bot.send_message(message.chat.id, "‚öñÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–≤–µ—Å* (–≤ –∫–≥):")
        bot.register_next_step_handler(message, calculate_bmi)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ* –¥–ª—è —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175).")
        bot.register_next_step_handler(message, ask_weight)

def calculate_bmi(message: Message):
    try:
        weight = float(message.text)
        user_data[message.chat.id]["weight"] = weight  #saving user weight
        height = user_data[message.chat.id]["height"] / 100
        bmi = weight / (height ** 2)

        #saving user bmi
        user_bmi_data[message.chat.id] = bmi
        #checking bmi for recommendations
        if bmi < 18.5:
            status = "üîπ –£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞*. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º."
        elif 18.5 <= bmi <= 24.9:
            status = "‚úÖ –í–∞—à –≤–µ—Å *–≤ –Ω–æ—Ä–º–µ*! –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif 25 <= bmi <= 29.9:
            status = "‚ö†Ô∏è –£ –≤–∞—Å *–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å*. –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        else:
            status = "üö® –£ –≤–∞—Å *–æ–∂–∏—Ä–µ–Ω–∏–µ*. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."

        bot.send_message(
            message.chat.id,
            f"üßÆ –í–∞—à *–ò–ú–¢*: `{bmi:.2f}`\n\n{status}"
        )
    except ValueError:   #error handling
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ *—á–∏—Å–ª–æ* –¥–ª—è –≤–µ—Å–∞.")
        bot.register_next_step_handler(message, calculate_bmi)


def userBMI(message: Message):
    bmi = user_bmi_data.get(message.chat.id)

    if bmi:
        bot.send_message(
            message.chat.id,
            f"üìâ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π *–ò–ú–¢*: `{bmi:.2f}`\n\n"
            "–ï—Å–ª–∏ –≤–∞—à –≤–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢."
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ò–ú–¢. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ *üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢*."
        )


@bot.message_handler(func=lambda message: message.text == "üìâ –í–∞—à –ò–ú–¢ —Å–µ–π—á–∞—Å")
def handle_bmi_now(message: Message):
    bmi = user_bmi_data.get(message.chat.id)  # Get saved BMI
    user_info = user_data.get(message.chat.id)  # Get user height & weight

    if bmi and user_info:
        height = user_info.get("height")  #passing height value
        weight = user_info.get("weight")  #passing weight value
        bot.send_message(
            message.chat.id,
            f"üìä –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π *–ò–ú–¢*: `{bmi:.2f}`\n\n"
            f"üìè –í–∞—à *—Ä–æ—Å—Ç*: `{height} —Å–º`\n"
            f"‚öñÔ∏è –í–∞—à *–≤–µ—Å*: `{weight} –∫–≥`\n\n")
    elif not bmi:  #error handling
        bot.send_message(message.chat.id,"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ò–ú–¢. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ *üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢*.")
#function that sets reminders
@bot.message_handler(func=lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def set_reminder_prompt(message: Message):   #asking user to set reminder
    bot.send_message(
        message.chat.id,
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`\n\n"
        "üìå *–ü—Ä–∏–º–µ—Ä:* `07:30 –£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`"
    )
    bot.register_next_step_handler(message, set_reminder)

def set_reminder(message: Message):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2: #error handling
            bot.send_message(message.chat.id, "‚ùå *–û—à–∏–±–∫–∞!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `HH:MM –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ`")
            return

        time_str, reminder_text = parts[0], parts[1]
        reminder_time = datetime.strptime(time_str, "%H:%M").time()
        now = datetime.now()
        reminder_datetime = datetime.combine(now.date(), reminder_time)

        if reminder_datetime < now:
            reminder_datetime += timedelta(days=1)

        user_id = message.chat.id
        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append((reminder_datetime, reminder_text))

        bot.send_message(user_id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{time_str}*: _{reminder_text}_")
    except ValueError:  #error handling
        bot.send_message(message.chat.id, "‚ùå *–û—à–∏–±–∫–∞!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `HH:MM –¢–µ–∫—Å—Ç`.")
#funtion that counts kcal by uploaded photo using AI
@bot.message_handler(func=lambda message: message.text == "üì∏ –§–æ—Ç–æ –µ–¥—ã")
def welcome(message: Message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã")
@bot.message_handler(content_types=['photo']) #take an uploaded photo
def photo_kcal(message):
    if message.photo:
        file_id = message.photo[-1].file_id  #getting photo id
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"  #photo url
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!")

    client = OpenAI(api_key=OPENAI_API_KEY)

    response = requests.get(file_url)
    if response.status_code != 200:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        return

    image_data = base64.b64encode(response.content).decode("utf-8")   #encoding photo to base64
#analyzing photo with chatGPT
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Estimate the calories in this food. Give the answer on russian and be precise.",
                    },
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{image_data}"},
                    },
                ],
            }
        ],
    )
    analysis = str(response.choices[0].message.content).strip()
    bot.send_message(message.chat.id, f"üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {analysis}")
#funtion that gives challenges
@bot.message_handler(func=lambda message: message.text == "üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è")
def give_challenge(message):
    user_id = str(message.chat.id)
    today = datetime.now().strftime("%Y-%m-%d")
    #check if user not in dictionary
    if user_id not in user_data:
        user_data[user_id] = {"active": [], "completed": [], "last_challenge_date": "", "challenge_count": 0}

    if user_data[user_id]["last_challenge_date"] == today and user_data[user_id]["challenge_count"] >= 3:
        bot.send_message(user_id, "‚ö† –¢—ã —É–∂–µ –≤–∑—è–ª 3 —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ üí™")
        return

    available_challenges = [ch for ch in challenges if ch not in user_data[user_id]["active"]]

    challenge = random.choice(available_challenges)
    user_data[user_id]["active"].append(challenge)
    user_data[user_id]["last_challenge_date"] = today
    user_data[user_id]["challenge_count"] += 1

    save_data()

    markup = telebot.types.InlineKeyboardMarkup()
    button = telebot.types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{challenge}")
    markup.add(button)

    bot.send_message(user_id, f"üî• –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge}\n\n"
                              "–ö–æ–≥–¥–∞ —Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—à—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=markup)

#saving completed challenge
@bot.callback_query_handler(func=lambda call: call.data.startswith("done_"))
def complete_challenge(call):
    user_id = str(call.message.chat.id)
    challenge = call.data[5:]

    if user_id in user_data and challenge in user_data[user_id]["active"]:
        user_data[user_id]["active"].remove(challenge)
        user_data[user_id]["completed"].append(challenge)
        save_data()

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω: {challenge} üí™")
#funtion that shows your challenges
@bot.message_handler(func=lambda message: message.text == "üî• –¢–≤–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂—ã")
def list_challenges(message):
    user_id = str(message.chat.id)
    active = user_data.get(user_id, {}).get("active", [])  #getting active challenges
    completed = user_data.get(user_id, {}).get("completed", [])  #getting completed challenges

    response = "üìã *–¢–≤–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏:*\n\n"

    if active:
        response += "üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:*\n" + "\n".join([f"‚ñ™ {ch}" for ch in active]) + "\n\n"
    else:
        response += "üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:* –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.\n\n"

    if completed:
        response += "‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:*\n" + "\n".join([f"‚úî {ch}" for ch in completed])
    else:
        response += "‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:* –ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π."

    bot.send_message(user_id, response, parse_mode="Markdown")

if __name__ == "__main__":
    threading.Thread(target= reminder_checker, daemon=True).start()
    bot.polling(none_stop=True)